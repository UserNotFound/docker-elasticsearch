#!/bin/bash
set -o errexit
set -o nounset

if [[ -n "${ES_HEAP_SIZE:-}" ]]; then
  # If we have an ENV var that sets ES_HEAP_SIZE, then we use that.
  echo "ES_HEAP_SIZE was forced to ${ES_HEAP_SIZE} via configuration!"
elif [[ -n "${APTIBLE_CONTAINER_SIZE:-}" ]]; then
  # However, if APTIBLE_CONTAINER_SIZE is set, then we default the ES Heap Size
  # to half the container size. Leave the rest for Lucene to use via filesystem
  # caches.
  # https://www.elastic.co/guide/en/elasticsearch/guide/current/heap-sizing.html
  ES_HEAP_SIZE="$((APTIBLE_CONTAINER_SIZE / 2))m"
  echo "ES_HEAP_SIZE is defauling to to ${ES_HEAP_SIZE}"
fi

if [[ -n "${ES_HEAP_SIZE:-}" ]]; then
  echo "APTIBLE_CONTAINER_SIZE=${APTIBLE_CONTAINER_SIZE:-}, ES_HEAP_SIZE=${ES_HEAP_SIZE}"

  if dpkg --compare-versions "$ES_VERSION" ge 5; then
    # If we're using ES 5, then ES_HEAP_SIZE no longer works, and we need to
    # use the Java heap options instead. We also preserve whatever was in
    # ES_JAVA_OPTS, just in case (while that's unspecified, if there are memory
    # options there, they'll tend to take precedence)
    export ES_JAVA_OPTS="-Xms${ES_HEAP_SIZE} -Xmx${ES_HEAP_SIZE} ${ES_JAVA_OPTS:-}"
    unset ES_HEAP_SIZE
  else
    # If we're using an older version, then we should export that variable (it
    # might already be exported if it came in via the environment, but if we
    # generated it via APTIBLE_CONTAINER_SIZE, it won't).
    export ES_HEAP_SIZE
  fi
fi

exec sudo -E -u "$ES_USER" /elasticsearch/bin/elasticsearch "$@"
